{"version":3,"sources":["Footer/github.svg","Footer/linkedin.svg","Footer/twitter.svg","Header/Header.js","Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","to","React","Component","Footer","href","src","github","alt","linkedin","twitter","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,2NCI9BC,G,YAAb,iLAEQ,OACI,gCACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,eACX,kBAAC,IAAD,CAAMC,GAAG,KAAT,UAGR,yBAAKD,UAAU,gBACX,yBAAKA,UAAU,iBACX,kBAAC,IAAD,CAAMC,GAAG,WAAT,WAEJ,yBAAKD,UAAU,kBACX,kBAAC,IAAD,CAAMC,GAAG,YAAT,sBAf5B,GAA4BC,IAAMC,Y,2DCGrBC,EAAb,iLAEQ,OACI,yBAAKJ,UAAU,UACX,yBAAKA,UAAU,UACX,4BACI,yBAAKA,UAAW,OAChB,uBAAGK,KAAK,iCAAgC,yBAAKC,IAAKC,IAAQP,UAAU,gBACvBQ,IAAI,aAGjD,yBAAKR,UAAW,OAChB,uBAAGK,KAAK,2CAA0C,yBAAKC,IAAKG,IACLT,UAAU,kBACVQ,IAAI,eAE3D,yBAAKR,UAAW,OAChB,uBAAGK,KAAK,kCAAiC,yBAAKC,IAAKI,IACJV,UAAU,iBACVQ,IAAI,qBAnB3E,GAA4BN,IAAMC,WCenBQ,E,iLAdP,OACI,kBAAC,IAAD,KACI,yBAAKX,UAAU,OACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,QACX,8CAEJ,kBAAC,EAAD,Y,GATFE,IAAMC,WCMJS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.87475cf3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.0d54cb5f.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.4a1b5d7e.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.c09bd7bb.svg\";","import React from 'react';\r\nimport './Header.css'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport class Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n                <div className=\"Header\">\r\n                    <div className=\"Header-Left\">\r\n                        <div className=\"Header-Home\">\r\n                            <Link to=\"/\" >Home</Link>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"Header-Right\">\r\n                        <div className=\"Header-Resume\">\r\n                            <Link to=\"/resume\">Resume</Link>\r\n                        </div>\r\n                        <div className=\"Header-Contact\">\r\n                            <Link to=\"/contact\">Contact Me</Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport './Footer.css';\r\nimport github from './github.svg';\r\nimport linkedin from './linkedin.svg';\r\nimport twitter from './twitter.svg';\r\n\r\nexport class Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Footer\">\r\n                <div className=\"center\">\r\n                    <ul>\r\n                        <div className={'img'}>\r\n                        <a href='https://github.com/ColdFerrin'><img src={github} className=\"Footer-github\"\r\n                                                                     alt=\"github\"/></a>\r\n                        </div>\r\n\r\n                        <div className={'img'}>\r\n                        <a href='https://www.linkedin.com/in/ferrinkatz/'><img src={linkedin}\r\n                                                                               className=\"Footer-linkedin\"\r\n                                                                               alt=\"linkedin\"/></a>\r\n                        </div>\r\n                        <div className={'img'}>\r\n                        <a href='https://twitter.com/coldferrin'><img src={twitter}\r\n                                                                       className=\"Footer-twitter\"\r\n                                                                       alt=\"twitter\"/></a>\r\n                        </div>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {BrowserRouter as Router, Route, Link} from \"react-router-dom\";\r\nimport './App.css';\r\nimport {Header} from './Header/Header'\r\nimport {Footer} from \"./Footer/Footer\";\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <div className=\"App\">\r\n                    <Header/>\r\n                    <div className=\"Body\">\r\n                        <p>this is a body</p>\r\n                    </div>\r\n                    <Footer/>\r\n                </div>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}